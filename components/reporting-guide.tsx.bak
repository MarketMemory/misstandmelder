'use client'
import { useState } from 'react'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2 } from 'lucide-react'

export default function ReportingGuide() {
  const [location, setLocation] = useState('')
  const [date, setDate] = useState('')
  const [description, setDescription] = useState('')
  const [rating, setRating] = useState(0)
  const [review, setReview] = useState('')
  const [chatMessages, setChatMessages] = useState<{ role: string; content: string }[]>([])
  const [chatInput, setChatInput] = useState('')
  const [isChatting, setIsChatting] = useState(false)
  const [isGenerating, setIsGenerating] = useState(false)

  const handleChat = async () => {
    if (!chatInput.trim()) return;

    const newMessages = [
      ...chatMessages,
      { role: 'user', content: chatInput },
    ]
    setChatMessages(newMessages)
    setChatInput('')
    setIsChatting(true)

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messages: newMessages }),
      })

      if (!response.ok) {
        throw new Error(`Chat API error: ${response.status}`)
      }

      const data = await response.json()
      setChatMessages([...newMessages, { role: 'assistant', content: data.response }])

      // Parse AI response om formulier-velden in te vullen
      const assistantResponse = data.response
      console.log('Assistant response:', assistantResponse)
      const lines = assistantResponse.split('\n')
      console.log('Parsed lines:', lines)
      lines.forEach((line: string) => {
        if (line.startsWith('Locatie:') && line !== 'Locatie: Niet opgegeven') {
          setLocation(line.replace('Locatie:', '').trim())
        }
        if (line.startsWith('Datum:') && line !== 'Datum: Niet opgegeven') {
          setDate(line.replace('Datum:', '').trim())
        }
        if (line.startsWith('Beschrijving:') && line !== 'Beschrijving: Niet opgegeven') {
          setDescription(line.replace('Beschrijving:', '').trim())
        }
        if (line.startsWith('Beoordeling:')) {
          const starsMatch = line.match(/Beoordeling: (\d)/)
          if (starsMatch && line !== 'Beoordeling: Niet opgegeven') {
            setRating(parseInt(starsMatch[1]))
          }
        }
        if (line.startsWith('Review:') && line !== 'Review: Niet gegenereerd') {
          setReview(line.replace('Review:', '').trim())
        }
      })
    } catch (error) {
      console.error('Error in chat:', error)
      setChatMessages([...newMessages, { role: 'assistant', content: 'Sorry, er ging iets mis. Probeer opnieuw.' }])
    } finally {
      setIsChatting(false)
    }
  }

  return (
    <Card className="w-full max-w-3xl mx-auto overflow-hidden rounded-2xl shadow-xl border-0 bg-gradient-to-br from-white to-blue-50 dark:from-gray-900 dark:to-gray-900/80">
      <CardHeader className="space-y-1 bg-gradient-to-r from-primary/10 to-transparent px-6 py-6 border-b">
        <CardTitle className="text-2xl font-bold">Misstand Melden</CardTitle>
        <CardDescription className="text-base">
          Vul de details in om een melding te genereren.
        </CardDescription>
      </CardHeader>
      <CardContent className="p-6">
        <Tabs defaultValue="form" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="form">Formulier</TabsTrigger>
            <TabsTrigger value="chat">AI-assistent</TabsTrigger>
          </TabsList>
          <TabsContent value="form">
            <div className="space-y-4">
              <div>
                <Label htmlFor="location">Locatie</Label>
                <Input
                  id="location"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  placeholder="Bijv. Gemeente Amsterdam"
                />
              </div>
              <div>
                <Label htmlFor="date">Datum</Label>
                <Input
                  id="date"
                  value={date}
                  onChange={(e) => setDate(e.target.value)}
                  placeholder="Bijv. 10 mei 2025"
                />
              </div>
              <div>
                <Label htmlFor="description">Beschrijving</Label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="Beschrijf de misstand"
                />
              </div>
              <div>
                <Label htmlFor="rating">Beoordeling</Label>
                <Input
                  id="rating"
                  type="number"
                  min="1"
                  max="5"
                  value={rating}
                  onChange={(e) => setRating(parseInt(e.target.value))}
                  placeholder="1-5 sterren"
                />
              </div>
              <div>
                <Label htmlFor="review">Review</Label>
                <Textarea
                  id="review"
                  value={review}
                  onChange={(e) => setReview(e.target.value)}
                  placeholder="Gegenereerde review"
                />
              </div>
            </div>
          </TabsContent>
          <TabsContent value="chat">
            <Card>
              <CardHeader>
                <CardTitle>AI-assistent</CardTitle>
                <CardDescription>Chat met de AI om je melding te genereren.</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="h-64 overflow-y-auto p-4 border rounded">
                    {chatMessages.map((msg, index) => (
                      <div key={index} className={`mb-2 ${msg.role === 'user' ? 'text-right' : 'text-left'}`}>
                        <span className={`inline-block p-2 rounded ${msg.role === 'user' ? 'bg-primary text-white' : 'bg-muted'}`}>
                          {msg.content}
                        </span>
                      </div>
                    ))}
                  </div>
                  <div className="flex gap-2">
                    <Input
                      value={chatInput}
                      onChange={(e) => setChatInput(e.target.value)}
                      placeholder="Typ je bericht..."
                      onKeyPress={(e) => e.key === 'Enter' && handleChat()}
                    />
                    <Button onClick={handleChat} disabled={isChatting}>
                      {isChatting ? <Loader2 className="h-4 w-4 animate-spin" /> : 'Verstuur'}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </CardContent>
      <CardFooter className="px-6 py-4">
        <Button onClick={() => setIsGenerating(true)} disabled={isGenerating}>
          {isGenerating ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
          Genereer Melding
        </Button>
      </CardFooter>
    </Card>
  )
}